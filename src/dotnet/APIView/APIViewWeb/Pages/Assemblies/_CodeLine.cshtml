@using ApiView
@using APIView.Model
@using APIView.DIff
@using System.Text.RegularExpressions
@using APIViewWeb.Models;
@using System.Text
@using APIViewWeb.Helpers
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model APIViewWeb.Models.CodeLineModel
@functions
{
    public static string RemoveMultipleSpaces(string str)
    {
        return String.Join(" ", str.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries));
    }
}
@{
    bool isRemoved = Model.Kind == DiffLineKind.Removed;
    string lineClass = Model.Kind switch
    {
        DiffLineKind.Removed => "code-removed",
        DiffLineKind.Added => "code-added",
        _ => ""
    };

    bool isSectionHeading = false;
    bool isSubSectionHeading = false;
    bool isHeadingWithDelta = false;
    string headingClass = String.Empty;
    string documentationRow = String.Empty;
    string hiddenApiRow = String.Empty;
    string codeLineDisplay = String.Empty;
    string codeLineClass = (!String.IsNullOrWhiteSpace(Model.CodeLine.LineClass)) ? Model.CodeLine.LineClass.Trim() : String.Empty;
    int? sectionKey = Model.DiffSectionId ?? Model.CodeLine.SectionKey;

    if (sectionKey != null)
    {
        isSectionHeading = true;
        headingClass = $"code-line-section-heading-{sectionKey}";
        if (Model.IsDiffView)
        {
            switch (Model.Kind)
            {
                case DiffLineKind.Added:
                    headingClass += $" rev-a-heading-{Model.CodeLine.SectionKey}";
                    break;
                case DiffLineKind.Removed:
                    headingClass += $" rev-b-heading-{Model.CodeLine.SectionKey}";
                    break;
                case DiffLineKind.Unchanged:
                    headingClass += $" rev-a-heading-{Model.CodeLine.SectionKey}";
                    headingClass += $" rev-b-heading-{Model.OtherLineSectionKey}";
                    break;
            }
        }
    }

    if(Model.CodeLine.IsDocumentation)
    {
        documentationRow = "code-line-documentation";
        codeLineDisplay = "hidden-row";
    }

    var userPreference = TempData["UserPreference"] as UserPreferenceModel ?? new UserPreferenceModel();

    // Always show hidden APIs if we are in Diff mode and there are changes.
    if (Model.CodeLine.IsHiddenApi && Model.Kind == DiffLineKind.Unchanged)
    {
        hiddenApiRow += PageModelHelpers.GetHiddenApiClass(userPreference);
    }

    if (Regex.IsMatch(codeLineClass, @".*lvl_[0-9]+_parent.*"))
    {
        isSubSectionHeading = true;
    }

    if (Model.Kind == DiffLineKind.Unchanged && 
        ((isSubSectionHeading && Model.IsSubHeadingWithDiffInSection) || (isSectionHeading && Model.HeadingsOfSectionsWithDiff.Contains(Model.LineNumber))))
    {
        lineClass += " code-delta";
        isHeadingWithDelta = true;
    }

    var rowClass = RemoveMultipleSpaces($"code-line {headingClass} {codeLineClass} {lineClass} {codeLineDisplay} {documentationRow} {hiddenApiRow}");
    var cellContent = String.Empty;
    for (int i = 0; i < Model.CodeLine.Indent; i++)
    {
        if ((isSectionHeading || isSubSectionHeading) && (i == Model.CodeLine.Indent - 1))
        {
            cellContent += @"<svg height='23' width='23'>
                                <line x1='0' y1='50%' x2='90%' y2='50%' style='stroke-width:1' class='code-inner__svg__line' />
                                <line x1='0' y1='0' x2='0' y2='100%' style='stroke-width:1.5' class='code-inner__svg__line' />
                            </svg>";
        }else
        {
            cellContent += @"<svg height='23' width='23'>
                                <line x1='0' y1='0' x2='0' y2='100%' style='stroke-width:1.5' />
                            </svg>";
        }
    }
    cellContent += Model.CodeLine.DisplayString.Replace(' ', '\u00A0');
}

<tr class="@rowClass" data-line-id="@(isRemoved ? string.Empty : Model.CodeLine.ElementId)" data-cross-lang-id="@(isRemoved ? string.Empty : Model.CodeLine.CrossLanguageDefinitionId)">
    <td class="line-details @lineClass">
        @{
            var lineNumberContent = String.Empty;
        }
        @if(userPreference.HideLineNumbers == true)
        {
            var lineNumberClass = RemoveMultipleSpaces($"line-number d-none");
            lineNumberContent = $"<span class=\"{lineNumberClass}\">{Model.LineNumber}</span>";
        }
        else
        {
            var lineNumberClass = $"line-number";
                    @if (!String.IsNullOrEmpty(Model.CodeLine.CrossLanguageDefinitionId) && PageModelHelpers.IsAPIStubHeader(Model.CodeLine.DisplayString))
                    {
                        lineNumberClass = $"{lineNumberClass} cl-line-no"; 
                    }

            if (Model.CodeLine.IsDocumentation)
            {
                lineNumberContent = $"<span class=\"{lineNumberClass} invisible\"></span>";
            }
            else
            {
                if (Model.IsDiffView)
                {
                    var paddValue = new string('0', Model.LineNumber.ToString().Length);
                    if (Model.Kind == DiffLineKind.Added)
                    {
                        lineNumberContent = $"<span class=\"{lineNumberClass} invisible\">{paddValue}</span><span class=\"{lineNumberClass}\">{Model.LineNumber}</span>";
                    }
                    else if (Model.Kind == DiffLineKind.Removed)
                    {
                        lineNumberContent = $"<span class=\"{lineNumberClass}\">{Model.LineNumber}</span><span class=\"{lineNumberClass} invisible\">{paddValue}</span>";
                    }
                    else
                    {
                        lineNumberContent = $"<span class=\"{lineNumberClass}\">{Model.LineNumber}</span><span class=\"{lineNumberClass}\">{Model.LineNumber}</span>";
                    }
                }
                else
                {
                    lineNumberContent = $"<span class=\"{lineNumberClass}\">{Model.LineNumber}</span>";
                }
            }
        }
        @{
            var lineDetailsCommentContent = string.Empty;
        }
        @if (!isRemoved && Model.CodeLine.ElementId != null)
        {
            lineDetailsCommentContent = "<a class=\"line-comment-button\">+</a>";
        }
        else
        {
            lineDetailsCommentContent = "<a class=\"line-comment-button invisible\">+</a>";// Added for visual consistency
        }
        @{
            var iconCommentClass = "icon-comments invisible";
            var comments = TempData["Comments"] as ReviewCommentsModel;
            if (sectionKey != null && comments != null && comments.Threads.Count() > 0)
            {
                if (comments.Threads.Any(c => c.LineClass != null && c.LineClass.Contains($"code-line-section-content-{sectionKey}")))
                {
                    iconCommentClass = $"{iconCommentClass} comment-in-section";
                }
            }
            lineDetailsCommentContent += $"<i class=\"icon {iconCommentClass} far fa-comment-alt me-1\"></i>";
            var documentationElements = "<span class='line-details-button-cell'><svg height='23' width='23'></svg></span>";
            var sectionExpandElement = String.Empty;
        }
        
        @if(Model.DocumentedByLines?.Length  > 0)
        {
            documentationElements = $"<span class='line-details-button-cell line-toggle-documentation-button' data-documented-by='[{String.Join(",", Model.DocumentedByLines)}]'><svg height='23' width='23' class='invisible line-details-button-cell__svg'><line x1='52%' y1='0' x2='52%' y2='16%' style='stroke:var(--text-muted-color);stroke-width:1.2;' /></svg><i class='line-toggle-documentation-button__i fa-regular fa-square-plus'></i></span>";
        }
        @if (Model.CodeLine.IsDocumentation)
        {
            documentationElements = "<span class='line-details-button-cell'><svg height='25' width='23' class='line-details-button-cell__svg'><line x1='52%' y1='0' x2='52%' y2='100%' style='stroke:var(--text-muted-color);stroke-width:1.2;' /></svg></span>";
        }
        @if (isSectionHeading || isSubSectionHeading)
        {
            sectionExpandElement = "<span class='line-details-button-cell'><i class='row-fold-caret fa-solid fa-angle-right'></i></span>";
        }
        @Html.Raw(lineNumberContent)<span class="line-details-button-cell comment-icon-cell">@Html.Raw(lineDetailsCommentContent)</span>@Html.Raw(documentationElements)@Html.Raw(sectionExpandElement)
    </td>
    <td class="code">
        @{
            string collapseMenu = (isSectionHeading || isSubSectionHeading) ? "<span class='row-fold-elipsis'><i class='fa-solid fa-ellipsis'></i></span>" : "";
        }
        @if (Model.Kind == DiffLineKind.Removed)
        {
            var codeRemovedSign = @"<svg height='23' width='23'>
                                        <text x='20%' y='70%' class='code-inner__svg__text'>&#45;</text>
                                    </svg>";
            <div class="code-inner">@Html.Raw(codeRemovedSign)@Html.Raw(cellContent)@Html.Raw(collapseMenu)</div>
        }
        else if(Model.Kind == DiffLineKind.Added)
        {
            var codeAddedSign = @"<svg height='23' width='23'>
                                        <text x='20%' y='70%' class='code-inner__svg__text'>&#43;</text>
                                    </svg>";
            <div class="code-inner">@Html.Raw(codeAddedSign)@Html.Raw(cellContent)@Html.Raw(collapseMenu)</div>
        }
        else 
        {
            var indentOrDelta = String.Empty;
            if (isHeadingWithDelta)
            {
                indentOrDelta = @"<svg height='23' width='23'>
                                        <text x='20%' y='70%' class='code-inner__svg__text'>&#177;</text>
                                    </svg>";
            }
            else
            {
                indentOrDelta = "<svg height='23' width='23'></svg>";
            }
            <div class="code-inner">@Html.Raw(indentOrDelta)@Html.Raw(cellContent)@Html.Raw(collapseMenu)</div>
        }
    </td>
</tr>
@if (isSectionHeading)
{
    <partial name="_CodeLinePartial" model="@sectionKey" />
}
@if (Model.Diagnostics.Any())
{
    var errorDiags = Model.Diagnostics.Where(d => d.Level == APIView.CodeDiagnosticLevel.Default || d.Level == APIView.CodeDiagnosticLevel.Error);
    var warningDiags = Model.Diagnostics.Where(d => d.Level == APIView.CodeDiagnosticLevel.Warning);
    var infoDiags = Model.Diagnostics.Where(d => d.Level == APIView.CodeDiagnosticLevel.Info);
    var diagnosticsClass = "code-diagnostics";
    if (userPreference.ShowSystemComments != true)
        diagnosticsClass += " d-none";

    if (Model.CodeLine.IsHiddenApi)
    {
        diagnosticsClass += PageModelHelpers.GetHiddenApiClass(userPreference);
    }
    <tr class="@diagnosticsClass" data-line-id="@Model.CodeLine.ElementId">
        <partial name="_DiagnosticsPartial" model="@errorDiags" />
    </tr>
    <tr class="@diagnosticsClass" data-line-id="@Model.CodeLine.ElementId">
        <partial name="_DiagnosticsPartial" model="@warningDiags" />
    </tr>
    <tr class="@diagnosticsClass" data-line-id="@Model.CodeLine.ElementId">
        <partial name="_DiagnosticsPartial" model="@infoDiags" />
    </tr>
}

@if (Model.CommentThread != null)
{
    <partial name="_CommentThreadPartial" model="@Model.CommentThread" />
}